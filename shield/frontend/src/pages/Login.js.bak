import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import toast from 'react-hot-toast';
import { AiFillEye, AiFillEyeInvisible, AiFillSafetyCertificate } from 'react-icons/ai';
import '../styles/Login.css';

const Login = () => {
  const [credentials, setCredentials] = useState({
    username: '',
    password: '',
  });
  const [loading, setLoading] = useState(false);
  const [showPassword, setShowPassword] = useState(false);
  const navigate = useNavigate();

  // Generate binary content for overlay
  const generateBinaryRows = () => {
    const rows = [];
    for (let i = 0; i < 15; i++) {
      const rowContent = [];
      for (let j = 0; j < 20; j++) {
        rowContent.push(
          <span key={j} className={Math.random() > 0.5 ? 'text-green-400' : 'text-green-300'}>
            {Math.random() > 0.5 ? '1' : '0'}
          </span>
        );
      }
      rows.push(<div key={i} className="binary-row">{rowContent}</div>);
    }
    return rows;
  };

  const handleChange = (e) => {
    const { name, value } = e.target;
    setCredentials({ ...credentials, [name]: value });
  };

  const handleLogin = async (e) => {
    e.preventDefault();
    setLoading(true);
    
    try {
      // Simulate API call with delay
      setTimeout(() => {
        // Store mock token and user data
        localStorage.setItem('token', 'mock-token-12345');
        localStorage.setItem('user', JSON.stringify({
          id: 1,
          username: credentials.username,
          email: `${credentials.username}@example.com`,
          role: 'admin'
        }));
        
        toast.success('Login successful!');
        navigate('/dashboard');
      }, 1500);
    } catch (error) {
      toast.error('Login failed. Please check your credentials.');
      console.error('Login error:', error);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="min-h-screen bg-black flex items-center justify-center relative overflow-hidden">
      {/* Binary overlay */}
      <div className="binary-overlay absolute inset-0 opacity-10 animate-pulse-slow2">
        {generateBinaryRows()}
      </div>
      
      {/* Grid pattern */}
      <div className="bg-grid-pattern absolute inset-0 z-0"></div>
      
      {/* Shield icon overlay */}
      <div className="absolute inset-0 flex items-center justify-center opacity-5 animate-pulse-slow">
        <AiFillSafetyCertificate size={400} className="text-green-500" />
      </div>
      
      <div className="max-w-md w-full bg-black bg-opacity-70 border border-green-500 rounded-lg shadow-xl p-8 relative z-10">
        <div className="flex justify-center mb-8">
          <AiFillSafetyCertificate size={60} className="text-green-500" />
        </div>
        
        <h2 className="text-2xl font-bold text-center text-white mb-6">
          <span className="text-green-500">SHIELD</span> SECURITY
        </h2>
        
        <form onSubmit={handleLogin} className="space-y-6">
          <div>
            <label htmlFor="username" className="block text-sm font-medium text-gray-300 mb-1">
              Username
            </label>
            <input
              type="text"
              id="username"
              name="username"
              value={credentials.username}
              onChange={handleChange}
              className="w-full px-4 py-2 bg-gray-900 border border-gray-700 focus:border-green-500 rounded-md text-white outline-none"
              placeholder="Enter your username"
              required
            />
          </div>
          
          <div>
            <label htmlFor="password" className="block text-sm font-medium text-gray-300 mb-1">
              Password
            </label>
            <div className="relative">
              <input
                type={showPassword ? 'text' : 'password'}
                id="password"
                name="password"
                value={credentials.password}
                onChange={handleChange}
                className="w-full px-4 py-2 bg-gray-900 border border-gray-700 focus:border-green-500 rounded-md text-white outline-none"
                placeholder="Enter your password"
                required
              />
              <button
                type="button"
                className="absolute right-3 top-1/2 -translate-y-1/2 text-gray-400"
                onClick={() => setShowPassword(!showPassword)}
              >
                {showPassword ? <AiFillEyeInvisible size={20} /> : <AiFillEye size={20} />}
              </button>
            </div>
          </div>
          
          <button
            type="submit"
            disabled={loading}
            className={`w-full py-2 px-4 bg-green-600 hover:bg-green-700 text-white font-semibold rounded-md transition duration-300 flex items-center justify-center ${loading ? 'opacity-70 cursor-not-allowed' : ''}`}
          >
            {loading ? (
              <svg className="animate-spin h-5 w-5 mr-2" viewBox="0 0 24 24">
                <circle
                  className="opacity-25"
                  cx="12"
                  cy="12"
                  r="10"
                  stroke="currentColor"
                  strokeWidth="4"
                  fill="none"
                ></circle>
                <path
                  className="opacity-75"
                  fill="currentColor"
                  d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
                ></path>
              </svg>
            ) : null}
            {loading ? 'Logging in...' : 'Login'}
          </button>
        </form>
      </div>
    </div>
  );
};

export default Login; 