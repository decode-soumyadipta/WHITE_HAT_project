from app.extensions import db
from datetime import datetime

class Vulnerability(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    title = db.Column(db.String(100), nullable=False)
    description = db.Column(db.Text, nullable=False)
    cvss_score = db.Column(db.Float)  # Common Vulnerability Scoring System
    status = db.Column(db.String(20), default='open')  # open, in_progress, resolved, verified
    severity = db.Column(db.String(20))  # critical, high, medium, low
    affected_systems = db.Column(db.Text)  # JSON string
    business_impact = db.Column(db.Float)  # Custom business impact score
    remediation_plan = db.Column(db.Text)
    organization_id = db.Column(db.Integer, db.ForeignKey('organization.id'))
    discovered_by = db.Column(db.String(100), default='SHIELD')
    discovered_at = db.Column(db.DateTime, default=datetime.utcnow)
    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    
    def to_dict(self):
        return {
            'id': self.id,
            'title': self.title,
            'description': self.description,
            'cvss_score': self.cvss_score,
            'status': self.status,
            'severity': self.severity,
            'affected_systems': self.affected_systems,
            'business_impact': self.business_impact,
            'remediation_plan': self.remediation_plan,
            'organization_id': self.organization_id,
            'discovered_by': self.discovered_by,
            'discovered_at': self.discovered_at.isoformat() if self.discovered_at else None,
            'updated_at': self.updated_at.isoformat() if self.updated_at else None
        } 